[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny import render\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import reactive, render, req\n\n\nui.page_opts(title=\"Sarah's Penguin Data\", fillable=True)\n    \nwith ui.sidebar(open=\"open\"):  \n        ui.h2(\"Sidebar\")\n        \n        ui.input_selectize(  \n        \"selectize\",  \n        \"Select an option below:\",  \n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n    )\n        ui.input_numeric(\"plotly_bin_count\", \"Bin Count\", 10, min=1, max=20)\n        (ui.input_slider(\"seaborn_bin_count\", \"Seaborn Slider\", 0, 50, 25),)\n\n        ui.input_checkbox_group(  \n        \"checkbox_group\",  \n        \"Checkbox group\",  \n        {  \n        \"bill_depth_mm\":\"Bill Depth\",  \n        \"flipper_length_mm\": \"Flipper Length\",  \n        \"body_mass_g\": \"Body Mass\",  \n        },  \n    )  \n\n        ui.input_checkbox_group(  \n        \"selected_species_list\",  \n        \"Select Species\",  \n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n    )  \n        ui.hr()\n        ui.a(\n        \"GitHub\",\n         href=\"https://github.com/sapapesh/cintel-02-data\",\n         target=\"_blank\",\n         )\n\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card(full_screen=True):\n        \"Penguins Table\"\n\n    @render.data_frame\n    def penguins_datatable():\n        return render.DataTable(filtered_data())\n\nwith ui.layout_columns(col_widths=(4, 8)):           \n    with ui.card(full_screen=True): \"Penguins Grid\"\n    @render.data_frame\n    def penguins_data():\n        return render.DataGrid(filtered_data(), row_selection_mode=\"multiple\")  \n\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card(full_screen=True): \"Plotly Penguins Histogram\"\n    @render_plotly\n    def plot1():\n        return px.histogram(px.data.tips(), y=\"sex\")\n\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card(full_screen=True): \"Seaborn Penguins Histogram\"\n    @render.plot(alt=\"Seaborn Histogram\")\n    def seaborn_histogram():\n        histplot = sns.histplot(data=filtered_data(), x=\"bill_depth_mm\", bins=input.seaborn_bin_count())\n        histplot.set_title(\"Palmer Penguins\")\n        \n        histplot.set_xlabel(\"Bill Depth\")\n        histplot.set_ylabel(\"Count\")\n        return histplot\n\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card(full_screen=True): \"Plotly Scatterplot\"\n\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(filtered_data(),\n            x=\"bill_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            title=\"Penguins Plot\",\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\",\n            },\n            size_max=8, \n        )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n\n\n# Additional Python Notes\n# ------------------------\n\n# Capitalization matters in Python. Python is case-sensitive: min and Min are different.\n# Spelling matters in Python. You must match the spelling of functions and variables exactly.\n# Indentation matters in Python. Indentation is used to define code blocks and must be consistent.\n\n# Functions\n# ---------\n# Functions are used to group code together and make it more readable and reusable.\n# We define custom functions that can be called later in the code.\n# Functions are blocks of logic that can take inputs, perform work, and return outputs.\n\n# Defining Functions\n# ------------------\n# Define a function using the def keyword, followed by the function name, parentheses, and a colon. \n# The function name should describe what the function does.\n# In the parentheses, specify the inputs needed as arguments the function takes.\n\n# For example:\n#    The function filtered_data() takes no arguments.\n#    The function between(min, max) takes two arguments, a minimum and maximum value.\n#    Arguments can be positional or keyword arguments, labeled with a parameter name.\n\n# The function body is indented (consistently!) after the colon. \n# Use the return keyword to return a value from a function.\n\n# Calling Functions\n# -----------------\n# Call a function by using its name followed by parentheses and any required arguments.\n    \n# Decorators\n# ----------\n# Use the @ symbol to decorate a function with a decorator.\n# Decorators a concise way of calling a function on a function.\n# We don't typically write decorators, but we often use them.\n\n", "type": "text"}]